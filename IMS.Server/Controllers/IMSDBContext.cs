//This code is auto generated by Breeze.
//Please don't alter the contents of this file

using System;
using System.Collections.Generic;
using System.Data;
using Npgsql;
using NpgsqlTypes;
using Serilog;
using WAF.DB;
namespace IMS.Server.Controllers{
	public partial class IMSDBContext : WAFPGSQLDBContext	{
		public IMSDBContext(string serverName, int port, string dbName, string userId, string password, Serilog.ILogger log) : base(serverName, port, dbName, userId, password, log){}
		public int CommandTimeOut{get;set;}=20;
		
		public void __drop_all_app_objects()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call __drop_all_app_objects()";

				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void _grant_exec_on_all_schemas(string _user_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call _grant_exec_on_all_schemas(@_user_id)";

				cmd.Parameters.Add(csp("_user_id", NpgsqlDbType.Text, _user_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void _grant_select_on_all_schemas(string _user_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call _grant_select_on_all_schemas(@_user_id)";

				cmd.Parameters.Add(csp("_user_id", NpgsqlDbType.Text, _user_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void _grant_usage_on_all_schemas(string _user_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call _grant_usage_on_all_schemas(@_user_id)";

				cmd.Parameters.Add(csp("_user_id", NpgsqlDbType.Text, _user_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void consumeauditlog(int? _audit_log_id, string _auditedobjectid)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call consumeauditlog(@_audit_log_id, @_auditedobjectid)";

				cmd.Parameters.Add(csp("_audit_log_id", NpgsqlDbType.Integer, _audit_log_id));
				cmd.Parameters.Add(csp("_auditedobjectid", NpgsqlDbType.Text, _auditedobjectid));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void delete_department(int? _id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call delete_department(@_id)";

				cmd.Parameters.Add(csp("_id", NpgsqlDbType.Integer, _id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void delete_inventory(long? _inventory_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call delete_inventory(@_inventory_id)";

				cmd.Parameters.Add(csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void delete_owner(int? _owner_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call delete_owner(@_owner_id)";

				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void delete_program(int? _program_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call delete_program(@_program_id)";

				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet get_department(int? _id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from get_department(@_id)";

				cmd.Parameters.Add(csp("_id", NpgsqlDbType.Integer, _id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet get_inventory(long? _inventory_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from get_inventory(@_inventory_id)";

				cmd.Parameters.Add(csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet get_owner(int? _owner_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from get_owner(@_owner_id)";

				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet get_program(int? _program_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from get_program(@_program_id)";

				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void insert_department(ref int? _id, string _dept, int? _emp_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call insert_department(@_id, @_dept, @_emp_id)";

				NpgsqlParameter param_id = csp("_id", NpgsqlDbType.Integer, _id, INOUT);
				cmd.Parameters.Add(param_id);
				cmd.Parameters.Add(csp("_dept", NpgsqlDbType.Char, _dept));
				cmd.Parameters.Add(csp("_emp_id", NpgsqlDbType.Integer, _emp_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
				_id = (param_id.Value == null || param_id.Value == DBNull.Value) ? default(int?) : (int?)param_id.Value;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void insert_inventory(ref long? _inventory_id, int? _program_id, int? _owner_id, string _make, string _serial_no, System.DateTime? _in_date, System.DateTime? _out_date, int? _is_deparment_item, int? _total_parts_count, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call insert_inventory(@_inventory_id, @_program_id, @_owner_id, @_make, @_serial_no, @_in_date, @_out_date, @_is_deparment_item, @_total_parts_count, @_remarks)";

				NpgsqlParameter param_inventory_id = csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id, INOUT);
				cmd.Parameters.Add(param_inventory_id);
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_make", NpgsqlDbType.Varchar, _make));
				cmd.Parameters.Add(csp("_serial_no", NpgsqlDbType.Varchar, _serial_no));
				cmd.Parameters.Add(csp("_in_date", NpgsqlDbType.Timestamp, _in_date));
				cmd.Parameters.Add(csp("_out_date", NpgsqlDbType.Timestamp, _out_date));
				cmd.Parameters.Add(csp("_is_deparment_item", NpgsqlDbType.Integer, _is_deparment_item));
				cmd.Parameters.Add(csp("_total_parts_count", NpgsqlDbType.Integer, _total_parts_count));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
				_inventory_id = (param_inventory_id.Value == null || param_inventory_id.Value == DBNull.Value) ? default(long?) : (long?)param_inventory_id.Value;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void insert_owner(ref int? _owner_id, string _owner_nm, string _contact_number, string _email_id, string _address_line, int? _state_id, string _pincode, System.DateTime? _last_refresh_dtm)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call insert_owner(@_owner_id, @_owner_nm, @_contact_number, @_email_id, @_address_line, @_state_id, @_pincode, @_last_refresh_dtm)";

				NpgsqlParameter param_owner_id = csp("_owner_id", NpgsqlDbType.Integer, _owner_id, INOUT);
				cmd.Parameters.Add(param_owner_id);
				cmd.Parameters.Add(csp("_owner_nm", NpgsqlDbType.Varchar, _owner_nm));
				cmd.Parameters.Add(csp("_contact_number", NpgsqlDbType.Varchar, _contact_number));
				cmd.Parameters.Add(csp("_email_id", NpgsqlDbType.Varchar, _email_id));
				cmd.Parameters.Add(csp("_address_line", NpgsqlDbType.Varchar, _address_line));
				cmd.Parameters.Add(csp("_state_id", NpgsqlDbType.Integer, _state_id));
				cmd.Parameters.Add(csp("_pincode", NpgsqlDbType.Char, _pincode));
				cmd.Parameters.Add(csp("_last_refresh_dtm", NpgsqlDbType.Timestamp, _last_refresh_dtm));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
				_owner_id = (param_owner_id.Value == null || param_owner_id.Value == DBNull.Value) ? default(int?) : (int?)param_owner_id.Value;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void insert_program(ref int? _program_id, string _program_code, string _program_nm, System.DateTime? _from_date, System.DateTime? _till_date, int? _is_active, int? _is_frozen, int? _district_or_city_id, string _location_nm, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call insert_program(@_program_id, @_program_code, @_program_nm, @_from_date, @_till_date, @_is_active, @_is_frozen, @_district_or_city_id, @_location_nm, @_remarks)";

				NpgsqlParameter param_program_id = csp("_program_id", NpgsqlDbType.Integer, _program_id, INOUT);
				cmd.Parameters.Add(param_program_id);
				cmd.Parameters.Add(csp("_program_code", NpgsqlDbType.Varchar, _program_code));
				cmd.Parameters.Add(csp("_program_nm", NpgsqlDbType.Varchar, _program_nm));
				cmd.Parameters.Add(csp("_from_date", NpgsqlDbType.Date, _from_date));
				cmd.Parameters.Add(csp("_till_date", NpgsqlDbType.Date, _till_date));
				cmd.Parameters.Add(csp("_is_active", NpgsqlDbType.Integer, _is_active));
				cmd.Parameters.Add(csp("_is_frozen", NpgsqlDbType.Integer, _is_frozen));
				cmd.Parameters.Add(csp("_district_or_city_id", NpgsqlDbType.Integer, _district_or_city_id));
				cmd.Parameters.Add(csp("_location_nm", NpgsqlDbType.Varchar, _location_nm));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
				_program_id = (param_program_id.Value == null || param_program_id.Value == DBNull.Value) ? default(int?) : (int?)param_program_id.Value;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void insertauditlog(ref int? _audit_log_id, int? _user_no, string _object_id, string _object_action, string _user_role_id, string _application_id, string _screen_id, string _action_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call insertauditlog(@_audit_log_id, @_user_no, @_object_id, @_object_action, @_user_role_id, @_application_id, @_screen_id, @_action_id)";

				NpgsqlParameter param_audit_log_id = csp("_audit_log_id", NpgsqlDbType.Integer, _audit_log_id, INOUT);
				cmd.Parameters.Add(param_audit_log_id);
				cmd.Parameters.Add(csp("_user_no", NpgsqlDbType.Integer, _user_no));
				cmd.Parameters.Add(csp("_object_id", NpgsqlDbType.Text, _object_id));
				cmd.Parameters.Add(csp("_object_action", NpgsqlDbType.Char, _object_action));
				cmd.Parameters.Add(csp("_user_role_id", NpgsqlDbType.Text, _user_role_id));
				cmd.Parameters.Add(csp("_application_id", NpgsqlDbType.Text, _application_id));
				cmd.Parameters.Add(csp("_screen_id", NpgsqlDbType.Text, _screen_id));
				cmd.Parameters.Add(csp("_action_id", NpgsqlDbType.Text, _action_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
				_audit_log_id = (param_audit_log_id.Value == null || param_audit_log_id.Value == DBNull.Value) ? default(int?) : (int?)param_audit_log_id.Value;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet isnumeric(string _str)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from isnumeric(@_str)";

				cmd.Parameters.Add(csp("_str", NpgsqlDbType.Text, _str));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet list_department(string _search_term, bool? _is_advanced_search, int? _top_n, int? _id, string _dept, int? _emp_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from list_department(@_search_term, @_is_advanced_search, @_top_n, @_id, @_dept, @_emp_id)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_is_advanced_search", NpgsqlDbType.Boolean, _is_advanced_search));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_id", NpgsqlDbType.Integer, _id));
				cmd.Parameters.Add(csp("_dept", NpgsqlDbType.Char, _dept));
				cmd.Parameters.Add(csp("_emp_id", NpgsqlDbType.Integer, _emp_id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet list_inventory(string _search_term, bool? _is_advanced_search, int? _top_n, long? _inventory_id, int? _program_id, int? _owner_id, string _make, string _serial_no, System.DateTime? _in_date, System.DateTime? _out_date, int? _is_deparment_item, int? _total_parts_count, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from list_inventory(@_search_term, @_is_advanced_search, @_top_n, @_inventory_id, @_program_id, @_owner_id, @_make, @_serial_no, @_in_date, @_out_date, @_is_deparment_item, @_total_parts_count, @_remarks)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_is_advanced_search", NpgsqlDbType.Boolean, _is_advanced_search));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id));
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_make", NpgsqlDbType.Varchar, _make));
				cmd.Parameters.Add(csp("_serial_no", NpgsqlDbType.Varchar, _serial_no));
				cmd.Parameters.Add(csp("_in_date", NpgsqlDbType.Timestamp, _in_date));
				cmd.Parameters.Add(csp("_out_date", NpgsqlDbType.Timestamp, _out_date));
				cmd.Parameters.Add(csp("_is_deparment_item", NpgsqlDbType.Integer, _is_deparment_item));
				cmd.Parameters.Add(csp("_total_parts_count", NpgsqlDbType.Integer, _total_parts_count));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet list_owner(string _search_term, bool? _is_advanced_search, int? _top_n, int? _owner_id, string _owner_nm, string _contact_number, string _email_id, string _address_line, int? _state_id, string _pincode, System.DateTime? _last_refresh_dtm)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from list_owner(@_search_term, @_is_advanced_search, @_top_n, @_owner_id, @_owner_nm, @_contact_number, @_email_id, @_address_line, @_state_id, @_pincode, @_last_refresh_dtm)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_is_advanced_search", NpgsqlDbType.Boolean, _is_advanced_search));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_owner_nm", NpgsqlDbType.Varchar, _owner_nm));
				cmd.Parameters.Add(csp("_contact_number", NpgsqlDbType.Varchar, _contact_number));
				cmd.Parameters.Add(csp("_email_id", NpgsqlDbType.Varchar, _email_id));
				cmd.Parameters.Add(csp("_address_line", NpgsqlDbType.Varchar, _address_line));
				cmd.Parameters.Add(csp("_state_id", NpgsqlDbType.Integer, _state_id));
				cmd.Parameters.Add(csp("_pincode", NpgsqlDbType.Char, _pincode));
				cmd.Parameters.Add(csp("_last_refresh_dtm", NpgsqlDbType.Timestamp, _last_refresh_dtm));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet list_program(string _search_term, bool? _is_advanced_search, int? _top_n, int? _program_id, string _program_code, string _program_nm, System.DateTime? _from_date, System.DateTime? _till_date, int? _is_active, int? _is_frozen, int? _district_or_city_id, string _location_nm, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from list_program(@_search_term, @_is_advanced_search, @_top_n, @_program_id, @_program_code, @_program_nm, @_from_date, @_till_date, @_is_active, @_is_frozen, @_district_or_city_id, @_location_nm, @_remarks)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_is_advanced_search", NpgsqlDbType.Boolean, _is_advanced_search));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_program_code", NpgsqlDbType.Varchar, _program_code));
				cmd.Parameters.Add(csp("_program_nm", NpgsqlDbType.Varchar, _program_nm));
				cmd.Parameters.Add(csp("_from_date", NpgsqlDbType.Date, _from_date));
				cmd.Parameters.Add(csp("_till_date", NpgsqlDbType.Date, _till_date));
				cmd.Parameters.Add(csp("_is_active", NpgsqlDbType.Integer, _is_active));
				cmd.Parameters.Add(csp("_is_frozen", NpgsqlDbType.Integer, _is_frozen));
				cmd.Parameters.Add(csp("_district_or_city_id", NpgsqlDbType.Integer, _district_or_city_id));
				cmd.Parameters.Add(csp("_location_nm", NpgsqlDbType.Varchar, _location_nm));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet lkp_department(string _search_term, int? _top_n)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from lkp_department(@_search_term, @_top_n)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet lkp_inventory(string _search_term, int? _top_n)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from lkp_inventory(@_search_term, @_top_n)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet lkp_owner(string _search_term, int? _top_n)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from lkp_owner(@_search_term, @_top_n)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet lkp_program(string _search_term, int? _top_n)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from lkp_program(@_search_term, @_top_n)";

				cmd.Parameters.Add(csp("_search_term", NpgsqlDbType.Text, _search_term));
				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet postgres_fdw_disconnect()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from postgres_fdw_disconnect()";

				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet postgres_fdw_disconnect_all()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from postgres_fdw_disconnect_all()";

				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet postgres_fdw_get_connections()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from postgres_fdw_get_connections()";

				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet postgres_fdw_handler()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from postgres_fdw_handler()";

				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet postgres_fdw_validator()		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from postgres_fdw_validator()";

				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet query_department(int? _top_n, int? _id, string _dept, int? _emp_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from query_department(@_top_n, @_id, @_dept, @_emp_id)";

				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_id", NpgsqlDbType.Integer, _id));
				cmd.Parameters.Add(csp("_dept", NpgsqlDbType.Char, _dept));
				cmd.Parameters.Add(csp("_emp_id", NpgsqlDbType.Integer, _emp_id));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet query_inventory(int? _top_n, long? _inventory_id, int? _program_id, int? _owner_id, string _make, string _serial_no, System.DateTime? _in_date, System.DateTime? _out_date, int? _is_deparment_item, int? _total_parts_count, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from query_inventory(@_top_n, @_inventory_id, @_program_id, @_owner_id, @_make, @_serial_no, @_in_date, @_out_date, @_is_deparment_item, @_total_parts_count, @_remarks)";

				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id));
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_make", NpgsqlDbType.Varchar, _make));
				cmd.Parameters.Add(csp("_serial_no", NpgsqlDbType.Varchar, _serial_no));
				cmd.Parameters.Add(csp("_in_date", NpgsqlDbType.Timestamp, _in_date));
				cmd.Parameters.Add(csp("_out_date", NpgsqlDbType.Timestamp, _out_date));
				cmd.Parameters.Add(csp("_is_deparment_item", NpgsqlDbType.Integer, _is_deparment_item));
				cmd.Parameters.Add(csp("_total_parts_count", NpgsqlDbType.Integer, _total_parts_count));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet query_owner(int? _top_n, int? _owner_id, string _owner_nm, string _contact_number, string _email_id, string _address_line, int? _state_id, string _pincode, System.DateTime? _last_refresh_dtm)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from query_owner(@_top_n, @_owner_id, @_owner_nm, @_contact_number, @_email_id, @_address_line, @_state_id, @_pincode, @_last_refresh_dtm)";

				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_owner_nm", NpgsqlDbType.Varchar, _owner_nm));
				cmd.Parameters.Add(csp("_contact_number", NpgsqlDbType.Varchar, _contact_number));
				cmd.Parameters.Add(csp("_email_id", NpgsqlDbType.Varchar, _email_id));
				cmd.Parameters.Add(csp("_address_line", NpgsqlDbType.Varchar, _address_line));
				cmd.Parameters.Add(csp("_state_id", NpgsqlDbType.Integer, _state_id));
				cmd.Parameters.Add(csp("_pincode", NpgsqlDbType.Char, _pincode));
				cmd.Parameters.Add(csp("_last_refresh_dtm", NpgsqlDbType.Timestamp, _last_refresh_dtm));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public DataSet query_program(int? _top_n, int? _program_id, string _program_code, string _program_nm, System.DateTime? _from_date, System.DateTime? _till_date, int? _is_active, int? _is_frozen, int? _district_or_city_id, string _location_nm, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "select * from query_program(@_top_n, @_program_id, @_program_code, @_program_nm, @_from_date, @_till_date, @_is_active, @_is_frozen, @_district_or_city_id, @_location_nm, @_remarks)";

				cmd.Parameters.Add(csp("_top_n", NpgsqlDbType.Integer, _top_n));
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_program_code", NpgsqlDbType.Varchar, _program_code));
				cmd.Parameters.Add(csp("_program_nm", NpgsqlDbType.Varchar, _program_nm));
				cmd.Parameters.Add(csp("_from_date", NpgsqlDbType.Date, _from_date));
				cmd.Parameters.Add(csp("_till_date", NpgsqlDbType.Date, _till_date));
				cmd.Parameters.Add(csp("_is_active", NpgsqlDbType.Integer, _is_active));
				cmd.Parameters.Add(csp("_is_frozen", NpgsqlDbType.Integer, _is_frozen));
				cmd.Parameters.Add(csp("_district_or_city_id", NpgsqlDbType.Integer, _district_or_city_id));
				cmd.Parameters.Add(csp("_location_nm", NpgsqlDbType.Varchar, _location_nm));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
				DataSet dset = new DataSet();
				PrintFunction(cmd);
				adapter.Fill(dset);
				return dset;
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void update_department(int? _id, string _dept, int? _emp_id)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call update_department(@_id, @_dept, @_emp_id)";

				cmd.Parameters.Add(csp("_id", NpgsqlDbType.Integer, _id));
				cmd.Parameters.Add(csp("_dept", NpgsqlDbType.Char, _dept));
				cmd.Parameters.Add(csp("_emp_id", NpgsqlDbType.Integer, _emp_id));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void update_inventory(long? _inventory_id, int? _program_id, int? _owner_id, string _make, string _serial_no, System.DateTime? _in_date, System.DateTime? _out_date, int? _is_deparment_item, int? _total_parts_count, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call update_inventory(@_inventory_id, @_program_id, @_owner_id, @_make, @_serial_no, @_in_date, @_out_date, @_is_deparment_item, @_total_parts_count, @_remarks)";

				cmd.Parameters.Add(csp("_inventory_id", NpgsqlDbType.Bigint, _inventory_id));
				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_make", NpgsqlDbType.Varchar, _make));
				cmd.Parameters.Add(csp("_serial_no", NpgsqlDbType.Varchar, _serial_no));
				cmd.Parameters.Add(csp("_in_date", NpgsqlDbType.Timestamp, _in_date));
				cmd.Parameters.Add(csp("_out_date", NpgsqlDbType.Timestamp, _out_date));
				cmd.Parameters.Add(csp("_is_deparment_item", NpgsqlDbType.Integer, _is_deparment_item));
				cmd.Parameters.Add(csp("_total_parts_count", NpgsqlDbType.Integer, _total_parts_count));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void update_owner(int? _owner_id, string _owner_nm, string _contact_number, string _email_id, string _address_line, int? _state_id, string _pincode, System.DateTime? _last_refresh_dtm)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call update_owner(@_owner_id, @_owner_nm, @_contact_number, @_email_id, @_address_line, @_state_id, @_pincode, @_last_refresh_dtm)";

				cmd.Parameters.Add(csp("_owner_id", NpgsqlDbType.Integer, _owner_id));
				cmd.Parameters.Add(csp("_owner_nm", NpgsqlDbType.Varchar, _owner_nm));
				cmd.Parameters.Add(csp("_contact_number", NpgsqlDbType.Varchar, _contact_number));
				cmd.Parameters.Add(csp("_email_id", NpgsqlDbType.Varchar, _email_id));
				cmd.Parameters.Add(csp("_address_line", NpgsqlDbType.Varchar, _address_line));
				cmd.Parameters.Add(csp("_state_id", NpgsqlDbType.Integer, _state_id));
				cmd.Parameters.Add(csp("_pincode", NpgsqlDbType.Char, _pincode));
				cmd.Parameters.Add(csp("_last_refresh_dtm", NpgsqlDbType.Timestamp, _last_refresh_dtm));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
		public void update_program(int? _program_id, string _program_code, string _program_nm, System.DateTime? _from_date, System.DateTime? _till_date, int? _is_active, int? _is_frozen, int? _district_or_city_id, string _location_nm, string _remarks)		{
			try			{
				NpgsqlCommand cmd = CreateCommand();
				cmd.CommandText = "call update_program(@_program_id, @_program_code, @_program_nm, @_from_date, @_till_date, @_is_active, @_is_frozen, @_district_or_city_id, @_location_nm, @_remarks)";

				cmd.Parameters.Add(csp("_program_id", NpgsqlDbType.Integer, _program_id));
				cmd.Parameters.Add(csp("_program_code", NpgsqlDbType.Varchar, _program_code));
				cmd.Parameters.Add(csp("_program_nm", NpgsqlDbType.Varchar, _program_nm));
				cmd.Parameters.Add(csp("_from_date", NpgsqlDbType.Date, _from_date));
				cmd.Parameters.Add(csp("_till_date", NpgsqlDbType.Date, _till_date));
				cmd.Parameters.Add(csp("_is_active", NpgsqlDbType.Integer, _is_active));
				cmd.Parameters.Add(csp("_is_frozen", NpgsqlDbType.Integer, _is_frozen));
				cmd.Parameters.Add(csp("_district_or_city_id", NpgsqlDbType.Integer, _district_or_city_id));
				cmd.Parameters.Add(csp("_location_nm", NpgsqlDbType.Varchar, _location_nm));
				cmd.Parameters.Add(csp("_remarks", NpgsqlDbType.Varchar, _remarks));
				PrintProcedure(cmd);
				cmd.ExecuteNonQuery();
			}catch (PostgresException ex)
			{
				Log.Error($"{ex.Message}\n{ex.Hint}\n{ex.Where}\n\nInternal Query:\n{ex.InternalQuery}\n{ex.StackTrace}");
				throw WrapPGException(ex);
			}catch(Exception ex)
			{
				Log.Error(ex.Message+"\n"+ex.StackTrace);
				throw;
			}
		}
		
public int BeginTransaction(int userNo, string applicationId, string userRoleId, string auditedObjectId, AuditableActions action, int screenId) {
            return BeginTransaction(userNo, applicationId, userRoleId, auditedObjectId, action, screenId.ToString(), null);
        }
        public int BeginTransaction(int userNo, string applicationId, string userRoleId, string auditedObjectId, AuditableActions action, int screenId, string actionId) {
            return BeginTransaction(userNo, applicationId, userRoleId, auditedObjectId, action, screenId.ToString(), actionId);
        }
        public int BeginTransaction(int userNo, string applicationId, string userRoleId, string auditedObjectId, AuditableActions action, string screenId) {
                return BeginTransaction(userNo, applicationId, userRoleId, auditedObjectId, action, screenId, null);
            }
        public int BeginTransaction(int userNo, string applicationId, string userRoleId, string auditedObjectId, AuditableActions action, string screenId, string actionId) {
                if (this.tran != null) {
                    throw new Exception("There is already an existing transaction, cant start a nested transaction");
                }
                this.BeginTransaction();
                this.isInAuditableTransaction = true;
                int? auditLogId = 0;
                this.insertauditlog(ref auditLogId, userNo, auditedObjectId, action.ToString().Substring(0, 1), userRoleId, applicationId, screenId, actionId);
                return auditLogId.Value;
            }
        public void CommitTransaction(int auditLogId, string auditedObjectId) {
            if (this.tran == null) {
                throw new Exception("There is no open transaction to be committed");
            }
            if (!this.isInAuditableTransaction) {
                throw new Exception("This transaction does not belong to an audit log entry. User other overload of this method which does not take audit log id as parameter");
            }
            this.consumeauditlog(auditLogId, auditedObjectId);
            this.isInAuditableTransaction = false;
            this.CommitTransaction();
        }
	}
}
